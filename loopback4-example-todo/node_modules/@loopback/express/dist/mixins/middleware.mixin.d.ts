import { Binding, BindingAddress, Constructor, Provider } from '@loopback/core';
import { ExpressMiddlewareFactory, ExpressRequestHandler, Middleware, MiddlewareBindingOptions } from '../types';
export declare function MiddlewareMixin<T extends Constructor<any>>(superClass: T): {
    new (...args: any[]): {
        [x: string]: any;
        /**
         * Bind an Express middleware to this server context
         *
         * @example
         * ```ts
         * import myExpressMiddlewareFactory from 'my-express-middleware';
         * const myExpressMiddlewareConfig= {};
         * const myExpressMiddleware = myExpressMiddlewareFactory(myExpressMiddlewareConfig);
         * server.expressMiddleware('middleware.express.my', myExpressMiddleware);
         * // Or
         * server.expressMiddleware('middleware.express.my', [myExpressMiddleware]);
         * ```
         * @param key - Middleware binding key
         * @param middleware - Express middleware handler function(s)
         *
         */
        expressMiddleware(key: BindingAddress<unknown>, middleware: ExpressRequestHandler | ExpressRequestHandler[], options?: MiddlewareBindingOptions | undefined): Binding<Middleware>;
        /**
         * Bind an Express middleware to this server context
         *
         * @example
         * ```ts
         * import myExpressMiddlewareFactory from 'my-express-middleware';
         * const myExpressMiddlewareConfig= {};
         * const myExpressMiddleware = myExpressMiddlewareFactory(myExpressMiddlewareConfig);
         * server.expressMiddleware('middleware.express.my', myExpressMiddleware);
         * // Or
         * server.expressMiddleware('middleware.express.my', [myExpressMiddleware]);
         * ```
         * @param key - Middleware binding key
         * @param middleware - Express middleware handler function(s)
         *
         */
        expressMiddleware<CFG>(middlewareFactory: ExpressMiddlewareFactory<CFG>, middlewareConfig?: CFG | undefined, options?: MiddlewareBindingOptions | undefined): Binding<Middleware>;
        /**
         * Bind an Express middleware to this server context
         *
         * @example
         * ```ts
         * import myExpressMiddlewareFactory from 'my-express-middleware';
         * const myExpressMiddlewareConfig= {};
         * const myExpressMiddleware = myExpressMiddlewareFactory(myExpressMiddlewareConfig);
         * server.expressMiddleware('middleware.express.my', myExpressMiddleware);
         * // Or
         * server.expressMiddleware('middleware.express.my', [myExpressMiddleware]);
         * ```
         * @param key - Middleware binding key
         * @param middleware - Express middleware handler function(s)
         *
         */
        expressMiddleware<CFG_1>(factoryOrKey: string | import("@loopback/core").BindingKey<Middleware> | ExpressMiddlewareFactory<CFG_1>, configOrHandler: ExpressRequestHandler | ExpressRequestHandler[] | CFG_1, options?: MiddlewareBindingOptions | undefined): Binding<Middleware>;
        /**
         * Register a middleware function or provider class
         *
         * @example
         * ```ts
         * const log: Middleware = async (requestCtx, next) {
         *   // ...
         * }
         * server.middleware(log);
         * ```
         *
         * @param middleware - Middleware function or provider class
         * @param options - Middleware binding options
         */
        middleware(middleware: Middleware | Constructor<Provider<Middleware>>, options?: MiddlewareBindingOptions): Binding<Middleware>;
    };
} & T;
